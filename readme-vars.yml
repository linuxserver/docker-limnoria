---

# project information
project_name: limnoria
project_url: "https://github.com/ProgVal/limnoria"
project_logo: "https://raw.githubusercontent.com/linuxserver/docker-limnoria/master/logo.png"
project_blurb: "[{{ project_name|capitalize }}]({{ project_url }}) A robust, full-featured, and user/programmer-friendly Python IRC bot, with many existing plugins. Successor of the well-known Supybot."
project_lsio_github_repo_url: "https://github.com/linuxserver/docker-{{ project_name }}"


# supported architectures
available_architectures:
  - { arch: "{{ arch_x86_64 }}", tag: "amd64-latest"}
  - { arch: "{{ arch_arm64 }}", tag: "arm64v8-latest"}

# container parameters
common_param_env_vars_enabled: true
param_container_name: "{{ project_name }}"

param_usage_include_vols: true
param_volumes:
  - { vol_path: "/config", vol_host_path: "/path/to/{{ project_name }}/config", desc: "Persistent config files" }

param_usage_include_ports: true
param_ports:
  - { external_port: "8080", internal_port: "8080", port_desc: "Port for Limnoria's web interface." }

# application setup block
app_setup_block_enabled: true
app_setup_block: |
  ### New Configuration

  If you do not have an existing config you will need to start the container and then run the following wizard command:

  `docker exec -it -w /config -u abc limnoria limnoria-wizard`

  ### Existing Configuration

  If you have an existing config, adjust the directory settings in your conf file as follows:

  ```conf
  supybot.directories.backup: /config/backup
  supybot.directories.conf: /config/conf
  supybot.directories.data: /config/data
  supybot.directories.data.tmp: /config/data/tmp
  supybot.directories.data.web: /config/web
  supybot.directories.log: /config/logs
  supybot.directories.plugins: /config/plugins
  ```

  NOTE: These are not grouped together in the file. You will need to search your conf file for the variables.

  Then place your conf file and any of your existing directories in /config and start up the container.

  ### Plugin Requirements

  The container will pip install any requirements.txt it finds in the /config/plugins folder on startup.

  If you install a plugin using the PluginDownloader that includes a requirements.txt you can
  execute a shell into the container and then use `pip install /config/plugins/ThePlugin/requirements.txt`
  or restart the container and the requirements will be installed.

# changelog
changelogs:
  - { date: "27.06.24:", desc: "Rebase to Alpine 3.20."}
  - { date: "23.12.23:", desc: "Rebase to Alpine 3.19."}
  - { date: "25.05.23:", desc: "Rebase to Alpine 3.18, deprecate armhf." }
  - { date: "22.12.22:", desc: "Rebase to alpine 3.17." }
  - { date: "19.09.22:", desc: "Rebase to alpine 3.15." }
  - { date: "25.05.21:", desc: "Install plugin requirements on container init." }
  - { date: "17.05.21:", desc: "Add linuxserver wheel index." }
  - { date: "13.02.21:", desc: "Rebasing to alpine 3.13." }
  - { date: "01.06.20:", desc: "Rebasing to alpine 3.12." }
  - { date: "13.01.20:", desc: "Initial Release." }
